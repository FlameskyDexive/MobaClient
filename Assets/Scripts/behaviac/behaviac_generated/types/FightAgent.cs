// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using GameFW;
using GameFW.Ultility;
using System.Collections;
/// <summary>
/// FightAgent是各种战斗Agent的基类,包含共有的属性和行为树外部执行方法
/// </summary>
public class FightAgent : behaviac.Agent
{
    #region behaviac自动生成的属性
    /// <summary>
    /// 能否攻击
    /// </summary>
    private bool couldAttack = false;
	public void _set_couldAttack(bool value)
	{
		couldAttack = value;
	}
	public bool _get_couldAttack()
	{
		return couldAttack;
	}
    /// <summary>
    /// 能否移动
    /// </summary>
	private bool couldMove = false;
	public void _set_couldMove(bool value)
	{
		couldMove = value;
	}
	public bool _get_couldMove()
	{
		return couldMove;
	}
    /// <summary>
    /// 是否已经死亡
    /// </summary>
	private bool isDead = false;
	public void _set_isDead(bool value)
	{
		isDead = value;
	}
	public bool _get_isDead()
	{
		return isDead;
	}
    public bool IsDead()
    {
        return this.isDead;
    }
    /// <summary>
    /// 当前行为树的生命状态
    /// </summary>
    private behaviac.EBTStatus LifeStatus = behaviac.EBTStatus.BT_INVALID;
    public void _set_LifeStatus(behaviac.EBTStatus value)
    {
        LifeStatus = value;
    }
    public behaviac.EBTStatus _get_LifeStatus()
    {
        return LifeStatus;
    }
    /// <summary>
    /// 此Agent的唯一Id
    /// </summary>
    public int Id { get; set; }
    /// <summary>
    /// 此Agent当前的位置
    /// </summary>
	private bVector3 position = null;
	public void _set_position(bVector3 value)
	{
		position = value;
	}
	public bVector3 _get_position()
	{
		return new bVector3(transform.position.x, transform.position.y, transform.position.z);
	}
    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
	public bool IsLowHp()
	{
		return false;
	}
    #endregion

    #region agent死亡时调用此方法
    public virtual void PlayDead()
    {
        
    }
#endregion

    #region 初始化行为树
    /// <summary>
    /// 外部初始化Behaviac和player
    /// </summary>
    public virtual void Initial()
    {
        InitBehavic();
        InitPlayer();
    }

    /// <summary>
    /// 初始化Behavic框架
    /// </summary>
    /// <returns></returns>
    protected bool InitBehavic()
    {
        behaviac.Workspace.Instance.FilePath = PathTool.ExportedFilePath;
        behaviac.Workspace.Instance.FileFormat = behaviac.Workspace.EFileFormat.EFF_xml;

        return true;
    }

    /// <summary>
    /// 初始化player,通过重载对应不同的行为树
    /// </summary>
    /// <returns></returns>
    protected virtual bool InitPlayer() { return true; }

    #endregion

    #region 启动、暂停、驱动行为树
    /// <summary>
    /// 启动AI
    /// </summary>
    public void StartAI()
    {
        _set_LifeStatus(behaviac.EBTStatus.BT_RUNNING);
        StartCoroutine("drive");
    }

    /// <summary>
    /// 停止AI
    /// </summary>
    public void StopAI() {
        _set_LifeStatus(behaviac.EBTStatus.BT_FAILURE);
        StopCoroutine("drive");
    }

    /// <summary>
    /// 对应行为树的当前状态
    /// </summary>
    behaviac.EBTStatus _status = behaviac.EBTStatus.BT_RUNNING;
    /// <summary>
    /// 驱动AI的协程
    /// </summary>
    /// <returns></returns>
    protected IEnumerator drive()
    {
        while (true)
        {
            if (_get_LifeStatus() != behaviac.EBTStatus.BT_FAILURE && _status == behaviac.EBTStatus.BT_RUNNING)
            {
                _status = this.btexec();
            }

            yield return CoroutineObjs.waitForMiliSeconds_1000;
        }
    }
    #endregion
}